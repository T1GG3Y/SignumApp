# Firebase Setup Guide

## Step 1: Create Firebase Project

1. Go to [Firebase Console](https://console.firebase.google.com/)
2. Click "Create a project"
3. Name it (e.g., "voice-recording-app")
4. Disable Google Analytics (optional)
5. Click "Create project"

## Step 2: Add Firebase to Your App

### Install Firebase SDK
```bash
npm install firebase
```

### Add iOS/Android Apps (for mobile)
1. In Firebase Console, click the iOS/Android icon
2. Register your app with bundle ID/package name
3. Download config files:
   - iOS: `GoogleService-Info.plist`
   - Android: `google-services.json`
4. Place in appropriate directories

## Step 3: Enable Services

### Authentication
1. Go to Authentication â†’ Sign-in method
2. Enable "Email/Password"
3. Optional: Enable Google Sign-In

### Cloud Firestore
1. Go to Firestore Database
2. Click "Create database"
3. Start in **production mode**
4. Choose your region
5. Set up security rules:

```javascript
// Firestore Security Rules
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can only access their own recordings
    match /recordings/{recording} {
      allow read, write: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
    }
    
    // User profiles
    match /users/{userId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == userId;
    }
  }
}
```

### Cloud Storage
1. Go to Storage
2. Click "Get started"
3. Set up security rules:

```javascript
// Storage Security Rules
rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Users can only access their own recordings
    match /recordings/{userId}/{allPaths=**} {
      allow read, write: if request.auth != null && 
        request.auth.uid == userId;
    }
  }
}
```

## Step 4: Get Your Config

1. Go to Project Settings (gear icon)
2. Scroll to "Your apps"
3. Copy the firebaseConfig object:

```javascript
const firebaseConfig = {
  apiKey: "AIza...",
  authDomain: "your-app.firebaseapp.com",
  projectId: "your-app",
  storageBucket: "your-app.appspot.com",
  messagingSenderId: "123456789",
  appId: "1:123456789:web:abc123"
};
```

## Step 5: Update Your Code

Replace the placeholder config in `firebase.js` with your actual config.

## Step 6: Add Login Screen

```javascript
// LoginScreen.js
import React, { useState } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  Alert,
  KeyboardAvoidingView,
  Platform,
} from 'react-native';
import { authService } from '../firebase';

const LoginScreen = ({ navigation }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [isSignUp, setIsSignUp] = useState(false);
  const [loading, setLoading] = useState(false);

  const handleAuth = async () => {
    if (!email || !password) {
      Alert.alert('Error', 'Please fill in all fields');
      return;
    }

    setLoading(true);
    
    const result = isSignUp 
      ? await authService.signUp(email, password)
      : await authService.signIn(email, password);

    setLoading(false);

    if (result.success) {
      navigation.navigate('Recording');
    } else {
      Alert.alert('Error', result.error);
    }
  };

  return (
    <KeyboardAvoidingView 
      style={styles.container}
      behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
    >
      <View style={styles.logoContainer}>
        <View style={styles.logo}>
          <Text style={styles.logoText}>S</Text>
        </View>
        <Text style={styles.appName}>Daily Reflections</Text>
      </View>

      <View style={styles.formContainer}>
        <TextInput
          style={styles.input}
          placeholder="Email"
          value={email}
          onChangeText={setEmail}
          autoCapitalize="none"
          keyboardType="email-address"
        />
        
        <TextInput
          style={styles.input}
          placeholder="Password"
          value={password}
          onChangeText={setPassword}
          secureTextEntry
        />

        <TouchableOpacity 
          style={[styles.button, loading && styles.buttonDisabled]}
          onPress={handleAuth}
          disabled={loading}
        >
          <Text style={styles.buttonText}>
            {loading ? 'Please wait...' : isSignUp ? 'Sign Up' : 'Sign In'}
          </Text>
        </TouchableOpacity>

        <TouchableOpacity onPress={() => setIsSignUp(!isSignUp)}>
          <Text style={styles.switchText}>
            {isSignUp ? 'Already have an account? Sign In' : "Don't have an account? Sign Up"}
          </Text>
        </TouchableOpacity>
      </View>
    </KeyboardAvoidingView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F5F5F5',
    justifyContent: 'center',
    padding: 20,
  },
  logoContainer: {
    alignItems: 'center',
    marginBottom: 50,
  },
  logo: {
    width: 100,
    height: 100,
    backgroundColor: '#B91C1C',
    justifyContent: 'center',
    alignItems: 'center',
    borderRadius: 10,
    marginBottom: 20,
  },
  logoText: {
    color: '#FFFFFF',
    fontSize: 60,
    fontWeight: '700',
  },
  appName: {
    fontSize: 24,
    fontWeight: '600',
    color: '#1F2937',
  },
  formContainer: {
    backgroundColor: '#FFFFFF',
    padding: 30,
    borderRadius: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 10,
    elevation: 5,
  },
  input: {
    borderWidth: 1,
    borderColor: '#E5E7EB',
    borderRadius: 10,
    padding: 15,
    marginBottom: 15,
    fontSize: 16,
  },
  button: {
    backgroundColor: '#3B82F6',
    padding: 15,
    borderRadius: 10,
    alignItems: 'center',
    marginTop: 10,
  },
  buttonDisabled: {
    opacity: 0.6,
  },
  buttonText: {
    color: '#FFFFFF',
    fontSize: 18,
    fontWeight: '600',
  },
  switchText: {
    textAlign: 'center',
    marginTop: 20,
    color: '#3B82F6',
    fontSize: 16,
  },
});

export default LoginScreen;
```

## Data Structure in Firestore

### Recordings Collection
```javascript
{
  id: "auto-generated",
  userId: "user123",
  audioUrl: "https://storage.googleapis.com/...",
  storageRef: "recordings/user123/1234567890.m4a",
  question: "Talk me through how today went...",
  questionIndex: 0,
  createdAt: Timestamp,
  duration: null // optional
}
```

### Users Collection (optional)
```javascript
{
  id: "auto-generated",
  userId: "user123",
  email: "user@example.com",
  createdAt: Timestamp,
  recordingCount: 15,
  lastRecordingDate: Timestamp,
  preferences: {
    reminderTime: "20:00",
    notificationsEnabled: true
  }
}
```

## Cost Estimates (Firebase Free Tier)

- **Authentication**: 10K verifications/month free
- **Firestore**: 
  - 50K reads/day free
  - 20K writes/day free
  - 1GB storage free
- **Storage**: 
  - 5GB storage free
  - 1GB/day bandwidth free

For a personal voice recording app, you'll likely stay within free limits for months.

## Testing Your Setup

1. Run your app: `npx expo start`
2. Create an account
3. Record a test audio
4. Check Firebase Console:
   - Firestore: See recording metadata
   - Storage: See audio file
   - Authentication: See user account

## Production Checklist

- [ ] Enable App Check for security
- [ ] Set up proper security rules
- [ ] Enable Firebase Analytics
- [ ] Set up error monitoring (Crashlytics)
- [ ] Configure backup policies
- [ ] Set up usage alerts